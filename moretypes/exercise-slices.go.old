package main

import "golang.org/x/tour/pic"

func Pic(dx, dy int) [][]uint8 {
	//Allocate a 2d slice of slices to work on
	image := make([][]uint8, dy)
	for i := 0; i < dy; i++ {
		image[i] = make([]uint8, dx)
	}

	//Operate on the slices to create cool effect

	//              for i := 0; i < dx; i++ {
	//                      for j := 0; j < dy; j++ {
	//                              image[i][j] = uint8(i * j)
	//                      }
	//              }

	// This one is my favorite. can change x to adjust how 'griddy' the image is.
	//        x := 2
	//        for i := 0; i < dx; i++ {
	//                for j := 0; j < dy; j++ {
	//                        image[i][j] = uint8((i ^ j) * x)
	//                }
	//        }

	// Actually this one is even better!
	for i := 0; i < dx; i++ {
		for j := 0; j < dy; j++ {
			if i%5 == 0 {
				//image[i][j] = uint8(255)
				image[i][j] = uint8(i * j)
			} else {
				image[i][j] = uint8((i ^ j)*2)
				//image[i][j] = uint8 (0)
			}
		}
	}
	return image
}

func main() {
	pic.Show(Pic)
}

